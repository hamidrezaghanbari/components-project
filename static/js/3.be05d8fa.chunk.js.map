{"version":3,"sources":["components/forms/form-validation/form-validation.component.jsx","components/hook-full/hook-full.component.jsx","components/react-table/table.component.jsx","components/react-table/react-table.component.jsx","assets/images/a.jpg","pages/home/home.page.jsx"],"names":["FormValidationComponent","useForm","register","handleSubmit","watch","errors","sleep","ms","Promise","resolve","setTimeout","console","log","customValidation","value","a","onSubmit","data","type","ref","required","name","minLength","family","validate","job","styled","div","fuzzyTextFilterFn","rows","id","filterValue","matchSorter","keys","row","values","autoRemove","val","Table","HomePage","className"],"mappings":"gsBA4CeA,EAzCiB,WAAO,IAAD,EACgBC,cAA1CC,EAD0B,EAC1BA,SAAUC,EADgB,EAChBA,aAAcC,EADE,EACFA,MAAOC,EADL,EACKA,OAQvC,SAASC,EAAMC,GACX,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAJtDI,QAAQC,IAAIR,EAAM,SAOlB,IAAMS,EAAgB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACfT,EAAM,KADS,UAEP,MAAVQ,EAFiB,0CAEK,GAFL,iCAGd,GAHc,2CAAH,sDAOtB,OACI,uBAAME,SAAUb,GAnBH,SAACc,GACdN,QAAQC,IAAIK,MAkBZ,UACI,kFAEA,uBAAOC,KAAK,OAAOC,IAAKjB,EAAS,CAAEkB,UAAU,IAASC,KAAK,SAC1DhB,EAAOgB,MAAQ,uDAEhB,uBAAOH,KAAK,OAAOC,IAAKjB,EAAS,CAAEkB,UAAU,EAAME,UAAW,IAAMD,KAAK,WACxEhB,EAAOkB,QAAiC,cAAvBlB,EAAOkB,OAAOL,MAAwB,uDAExD,yBAAQG,KAAK,MAAMF,IAAKjB,EAAS,CAAEkB,UAAU,EAAMI,SAAUX,IAA7D,UACI,wBAAQC,MAAM,IAAd,iBACA,wBAAQA,MAAM,IAAd,yBAEHT,EAAOoB,KAA2B,aAApBpB,EAAOoB,IAAIP,MAAuB,4DAEjD,gD,+DC2HMQ,IAAOC,IAAV,qE,gDCsBf,SAASC,EAAkBC,EAAMC,EAAIC,GACjC,OAAOC,YAAYH,EAAME,EAAa,CAAEE,KAAM,CAAC,SAAAC,GAAG,OAAIA,EAAIC,OAAOL,OAIrEF,EAAkBQ,WAAa,SAAAC,GAAG,OAAKA,GAkIxBC,I,SC1OAZ,IAAOC,IAAV,mpB,4BCrFG,I,OCwEAY,UA1DE,WACb,OACI,qBAAKC,UAAU,YAAf,SAmDI,cAAC,EAAD","file":"static/js/3.be05d8fa.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useForm } from 'react-hook-form'\r\n\r\nconst FormValidationComponent = () => {\r\n    const { register, handleSubmit, watch, errors } = useForm()\r\n    const onSubmit = (data) => {\r\n        console.log(data)\r\n    }\r\n\r\n    console.log(watch(\"name\"));\r\n\r\n\r\n    function sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    const customValidation = async (value) => {\r\n        await sleep(5000)\r\n        if (value === '1') return true\r\n        return false\r\n    }\r\n \r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <h1>react form validation with react hook validation</h1>\r\n\r\n            <input type=\"text\" ref={register({ required: true })} name=\"name\" />\r\n            {errors.name && <p>the name is have error</p>}\r\n\r\n            <input type=\"text\" ref={register({ required: true, minLength: 2 })} name=\"family\" />\r\n            {errors.family && errors.family.type === 'minLength' && <p>the name is have error</p>}\r\n\r\n            <select name=\"job\" ref={register({ required: true, validate: customValidation })}>\r\n                <option value=\"1\">ali</option>\r\n                <option value=\"2\">abolfazl</option>\r\n            </select>\r\n            {errors.job && errors.job.type === 'validate' && <p>the selection is have error</p>}\r\n\r\n            <button>submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FormValidationComponent\r\n","import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useHistory, useLocation, useParams, useRouteMatch } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { useFetchPost } from '../../effects/use-fetch-post.effect'\r\nimport FormHookComponent from './form-hook/form-hook.component'\r\nimport { useFetch, useFetchAsync } from './use-fetch.hook'\r\n\r\nconst HookFullComponent = () => {\r\n    // simple usage of useState\r\n    const [count, setCount] = useState(0)\r\n\r\n    // simple use of setEffect for componentDidMount\r\n    const [posts, setPosts] = useState([])\r\n    useEffect(() => {\r\n        axios.get('https://jsonplaceholder.ir/posts').then(res => {\r\n            setPosts(res.data)\r\n        })\r\n    }, [])\r\n\r\n    // simple use of useEffect for componentWillunmount\r\n    useEffect(() => {\r\n        return () => console.log('component will unmount this is cleanup function')\r\n    }, [])\r\n\r\n    // simple use of useEffect for componentWillReciveProps\r\n    useEffect(() => {\r\n        console.log(count, 'change happened to count')\r\n    }, [count])\r\n\r\n    // use hook for custom hooks\r\n    const users = useFetch('https://jsonplaceholder.ir/users')\r\n\r\n    // use hook for custom async await hooks\r\n    const asyncUsers = useFetchAsync('https://jsonplaceholder.ir/users')\r\n\r\n    // use hook for input and use async await in useEffect \r\n    const [name, setName] = useState('')\r\n    const [user, setUser] = useState({})\r\n    useEffect(() => {\r\n        if (name.length > 0) {\r\n            // it just run when name is changed\r\n            const fetchFunc = async () => {\r\n                const response = await fetch(`https://jsonplaceholder.ir/users?username=${name}`)\r\n                const resJson = await response.json()\r\n                setUser(resJson)\r\n            }\r\n\r\n            fetchFunc()\r\n        }\r\n\r\n    }, [name])\r\n\r\n\r\n    // for edit form\r\n    const customInitialValues = { name: 'hamidreza', email: 'hamidreza@gmail.com', password: 'password' }\r\n\r\n\r\n    // react custom hook\r\n    const post = useFetchPost()\r\n\r\n\r\n    // hooks for react router\r\n    let history = useHistory()\r\n    const goToEtcPage = () => {\r\n        history.push('/etc')\r\n    }\r\n\r\n    // get location\r\n    const location = useLocation();\r\n    useEffect(() => {\r\n        const currentPath = location.pathname;\r\n        const searchParams = new URLSearchParams(location.search);\r\n        // alert(currentPath)\r\n        // alert(searchParams)\r\n    }, [location]);\r\n\r\n    // get params from url\r\n    const { param } = useParams();\r\n\r\n    // to get match\r\n    const match = useRouteMatch();\r\n\r\n    return (\r\n        <HrWrapper>\r\n            <h1>hook full</h1>\r\n\r\n            <hr />\r\n            <div>\r\n                <p>simple use of use state {count}</p>\r\n                <button onClick={() => setCount(prevCount => prevCount + 1)}>add one to counter</button>\r\n            </div>\r\n            <hr />\r\n\r\n            <hr />\r\n            <p>simple use of use state for componentdidmount</p>\r\n            <ul>\r\n                {\r\n                    posts.slice(0, 3).map((post, index) => {\r\n                        return <li key={index}>{post.title}</li>\r\n                    })\r\n                }\r\n            </ul>\r\n            <hr />\r\n\r\n            <hr />\r\n            <p>use useeffect for show users list with custom hook</p>\r\n            <ul>\r\n                {\r\n                    users.slice(0, 2).map((user, index) => {\r\n                        return <li key={index}>{user.name}</li>\r\n                    })\r\n                }\r\n            </ul>\r\n            <hr />\r\n\r\n            <hr />\r\n            <p>use useeffect for show users list with custom hook with async await structure</p>\r\n            <ul>\r\n                {\r\n                    asyncUsers.slice(2, 6).map((user, index) => {\r\n                        return <li key={index}>{user.name}</li>\r\n                    })\r\n                }\r\n            </ul>\r\n            <hr />\r\n\r\n            <hr />\r\n            <p>use state for get user name</p>\r\n            <input onChange={(e) => setName(e.target.value)} type=\"text\" />\r\n            <p>{name}</p>\r\n            {\r\n                user.length === 1 ? <em>{user[0].email}</em>\r\n                    : <span>no user not fount</span>\r\n            }\r\n            <hr />\r\n\r\n            <hr />\r\n            <FormHookComponent />\r\n            <hr />\r\n\r\n            <hr />\r\n            <FormHookComponent {...customInitialValues} />\r\n            <hr />\r\n\r\n            <hr />\r\n            <p>use custom hook for get post</p>\r\n            {\r\n                post ? <p>{post.body.substring(0, 100)}</p> : 'not post fount yet'\r\n            }\r\n            <hr />\r\n\r\n            <hr />\r\n            <p>use hooks for react router</p>\r\n            <button onClick={goToEtcPage}>click to go etc page</button>\r\n            <hr />\r\n\r\n\r\n        </HrWrapper>\r\n    )\r\n}\r\n\r\nconst HrWrapper = styled.div`\r\n    hr {\r\n        margin: 20px; \r\n    }\r\n`\r\n\r\nexport default HookFullComponent\r\n","import React from 'react'\r\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce, useSortBy } from 'react-table'\r\nimport { matchSorter } from 'match-sorter'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSortAmountDown, faSortAmountUp } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// Define a default UI for filtering\r\nfunction GlobalFilter({\r\n    preGlobalFilteredRows,\r\n    globalFilter,\r\n    setGlobalFilter,\r\n}) {\r\n    const count = preGlobalFilteredRows.length\r\n    const [value, setValue] = React.useState(globalFilter)\r\n    const onChange = useAsyncDebounce(value => {\r\n        setGlobalFilter(value || undefined)\r\n    }, 200)\r\n\r\n    return (\r\n        <span>\r\n            Search:{' '}\r\n            <input\r\n                value={value || \"\"}\r\n                onChange={e => {\r\n                    setValue(e.target.value);\r\n                    onChange(e.target.value);\r\n                }}\r\n                placeholder={`${count} records...`}\r\n                style={{\r\n                    fontSize: '1.1rem',\r\n                    border: '0',\r\n                }}\r\n            />\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n// input search filter\r\nexport function InputSearchColumnFilter({\r\n    column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n    const count = preFilteredRows.length\r\n\r\n    return (\r\n        <input\r\n            value={filterValue || ''}\r\n            onChange={e => {\r\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n            }}\r\n            placeholder={`Search ${count} records...`}\r\n        />\r\n    )\r\n}\r\n\r\n// Define a default UI for filtering\r\nfunction DefaultColumnFilter({\r\n    column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n    const count = preFilteredRows.length\r\n    return ''\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nexport function SelectColumnFilter({\r\n    column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n    // Calculate the options for filtering\r\n    // using the preFilteredRows\r\n    const options = React.useMemo(() => {\r\n        const options = new Set()\r\n        preFilteredRows.forEach(row => {\r\n            options.add(row.values[id])\r\n        })\r\n        return [...options.values()]\r\n    }, [id, preFilteredRows])\r\n\r\n    // Render a multi-select box\r\n    return (\r\n        <select\r\n            value={filterValue}\r\n            onChange={e => {\r\n                setFilter(e.target.value || undefined)\r\n            }}\r\n        >\r\n            <option value=\"\">All</option>\r\n            {options.map((option, i) => (\r\n                <option key={i} value={option}>\r\n                    {option}\r\n                </option>\r\n            ))}\r\n        </select>\r\n    )\r\n}\r\n\r\n// This is a custom filter UI that uses a\r\n// slider to set the filter value between a column's\r\n// min and max values\r\nexport function SliderColumnFilter({\r\n    column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n    // Calculate the min and max\r\n    // using the preFilteredRows\r\n\r\n    const [min, max] = React.useMemo(() => {\r\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n        preFilteredRows.forEach(row => {\r\n            min = Math.min(row.values[id], min)\r\n            max = Math.max(row.values[id], max)\r\n        })\r\n        return [min, max]\r\n    }, [id, preFilteredRows])\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type=\"range\"\r\n                min={min}\r\n                max={max}\r\n                value={filterValue || min}\r\n                onChange={e => {\r\n                    setFilter(parseInt(e.target.value, 10))\r\n                }}\r\n            />\r\n            <button onClick={() => setFilter(undefined)}>Off</button>\r\n        </>\r\n    )\r\n}\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nexport function NumberRangeColumnFilter({\r\n    column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) {\r\n    const [min, max] = React.useMemo(() => {\r\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n        preFilteredRows.forEach(row => {\r\n            min = Math.min(row.values[id], min)\r\n            max = Math.max(row.values[id], max)\r\n        })\r\n        return [min, max]\r\n    }, [id, preFilteredRows])\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n            }}\r\n        >\r\n            <input\r\n                value={filterValue[0] || ''}\r\n                type=\"number\"\r\n                onChange={e => {\r\n                    const val = e.target.value\r\n                    setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\r\n                }}\r\n                placeholder={`Min (${min})`}\r\n                style={{\r\n                    width: '70px',\r\n                    marginRight: '0.5rem',\r\n                }}\r\n            />\r\n        to\r\n            <input\r\n                value={filterValue[1] || ''}\r\n                type=\"number\"\r\n                onChange={e => {\r\n                    const val = e.target.value\r\n                    setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\r\n                }}\r\n                placeholder={`Max (${max})`}\r\n                style={{\r\n                    width: '70px',\r\n                    marginLeft: '0.5rem',\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n    return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = val => !val\r\n\r\n// Our table component\r\nfunction Table({ columns, data }) {\r\n    const filterTypes = React.useMemo(\r\n        () => ({\r\n            // Add a new fuzzyTextFilterFn filter type.\r\n            fuzzyText: fuzzyTextFilterFn,\r\n            // Or, override the default text filter to use\r\n            // \"startWith\"\r\n            text: (rows, id, filterValue) => {\r\n                return rows.filter(row => {\r\n                    const rowValue = row.values[id]\r\n                    return rowValue !== undefined\r\n                        ? String(rowValue)\r\n                            .toLowerCase()\r\n                            .startsWith(String(filterValue).toLowerCase())\r\n                        : true\r\n                })\r\n            },\r\n        }),\r\n        []\r\n    )\r\n\r\n    const defaultColumn = React.useMemo(\r\n        () => ({\r\n            // Let's set up our default Filter UI\r\n            Filter: DefaultColumnFilter,\r\n            // Filter: undefined,\r\n        }),\r\n        []\r\n    )\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        state,\r\n        visibleColumns,\r\n        preGlobalFilteredRows,\r\n        setGlobalFilter,\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn, // Be sure to pass the defaultColumn option\r\n            filterTypes,\r\n        },\r\n        useFilters, // useFilters!\r\n        useGlobalFilter, // useGlobalFilter!\r\n        useSortBy,\r\n    )\r\n\r\n    // We don't want to render all of the rows for this example, so cap\r\n    // it for this use case\r\n    const firstPageRows = rows.slice(0, 10)\r\n\r\n    return (\r\n        <>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column => (\r\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                \r\n                                    <span>\r\n                                        {column.isSorted\r\n                                            ? column.isSortedDesc\r\n                                                ? <FontAwesomeIcon icon={faSortAmountDown} />\r\n                                                : <FontAwesomeIcon icon={faSortAmountUp} />\r\n                                            : ''}\r\n                                    </span>\r\n\r\n                                    {column.render('Header')}\r\n                                    {/* Render the columns filter UI */}\r\n                                    <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                    <tr>\r\n                        <th\r\n                            colSpan={visibleColumns.length}\r\n                            style={{\r\n                                textAlign: 'left',\r\n                            }}\r\n                        >\r\n                            <GlobalFilter\r\n                                preGlobalFilteredRows={preGlobalFilteredRows}\r\n                                globalFilter={state.globalFilter}\r\n                                setGlobalFilter={setGlobalFilter}\r\n                            />\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {firstPageRows.map((row, i) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table >\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n// Define a custom filter filter function!\r\nexport function filterGreaterThan(rows, id, filterValue) {\r\n    return rows.filter(row => {\r\n        const rowValue = row.values[id]\r\n        return rowValue >= filterValue\r\n    })\r\n}\r\n\r\n// This is an autoRemove method on the filter function that\r\n// when given the new filter value and returns true, the filter\r\n// will be automatically removed. Normally this is just an undefined\r\n// check, but here, we want to remove the filter if it's not a number\r\nfilterGreaterThan.autoRemove = val => typeof val !== 'number'\r\n\r\nexport default Table","import React, { useEffect } from 'react'\r\nimport styled from 'styled-components';\r\nimport makeData from './data'\r\nimport Table, {\r\n    SliderColumnFilter,\r\n    NumberRangeColumnFilter,\r\n    SelectColumnFilter,\r\n    filterGreaterThan,\r\n    InputSearchColumnFilter\r\n} from './table.component'\r\n\r\nimport { CustomData } from './custom-data-for-pbshmi'\r\nimport './react-table.styles.scss'\r\n\r\nconst ReactTableComponent = () => {\r\n\r\n    useEffect(() => {\r\n        console.log(makeData(1))\r\n    }, [])\r\n\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Events',\r\n                columns: [\r\n                    {\r\n                        Header: 'Num',\r\n                        accessor: 'num'\r\n                    },\r\n                    {\r\n                        Header: 'Description',\r\n                        accessor: 'description',\r\n                        Filter: InputSearchColumnFilter\r\n                    },\r\n                    {\r\n                        Header: 'Status',\r\n                        accessor: 'status',\r\n                        Filter: SelectColumnFilter,\r\n                    },\r\n\r\n                    {\r\n                        Header: 'Time',\r\n                        accessor: 'time',\r\n                        Filter: InputSearchColumnFilter,\r\n                    },\r\n                    {\r\n                        Header: 'Amount',\r\n                        accessor: 'amount',\r\n                    },\r\n                    {\r\n                        Header: 'Hour',\r\n                        accessor: 'hour',\r\n                        Filter: InputSearchColumnFilter,\r\n                    },\r\n                    {\r\n                        Header: 'Minute',\r\n                        accessor: 'minute',\r\n                        Filter: InputSearchColumnFilter,\r\n                    },\r\n                    {\r\n                        Header: 'Area',\r\n                        accessor: 'area',\r\n                        Filter: InputSearchColumnFilter,\r\n                    },\r\n                \r\n                ],\r\n            },\r\n            \r\n        ],\r\n        []\r\n    )\r\n\r\n    // const data = React.useMemo(() => makeData(100000), [])\r\n\r\n    return (\r\n        <div className=\"trend-page\">\r\n            <div className=\"table-wrapper\">\r\n                <Styles>\r\n                    <Table columns={columns} data={CustomData} />\r\n                </Styles>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Styles = styled.div`\r\n   text-align: left;\r\n   direction: ltr; \r\n  padding: 1rem;\r\n\r\n  table {\r\n    text-align: left;\r\n    direction: ltr; \r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tbody tr:nth-child(even){\r\n        background-color: #f2f2f2;\r\n    }\r\n\r\n    thead tr:first-child {\r\n        background-color: red;\r\n    }\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default ReactTableComponent\r\n","export default __webpack_public_path__ + \"static/media/a.d59f6bd9.jpg\";","\r\nimport FirstAnimationComponent from '../../components/animations/first-animation.component'\r\nimport AnimationDropdownComponent from '../../components/dropdown/animation-dropdown/animation-dropdown.component'\r\nimport FirstFormComponent from '../../components/forms/first-form/first-form.component'\r\nimport FormValidationComponent from '../../components/forms/form-validation/form-validation.component'\r\nimport SecondFormComponent from '../../components/forms/second-form/second-form.component'\r\nimport ThirdFormComponent from '../../components/forms/third-form/third-form.component'\r\nimport HookFullComponent from '../../components/hook-full/hook-full.component'\r\nimport AccordionMenuComponent from '../../components/menu/accordion-menu/accordion-menu.component'\r\nimport SplitMenuComponent from '../../components/menu/split-menu/split-menu.component'\r\nimport ReactTableComponent from '../../components/react-table/react-table.component'\r\nimport PageScrollerComponent from '../../components/slider/page-scroller/page-scroller.component'\r\nimport './home.styles.scss'\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div className=\"home-page\">\r\n            {/* list of menu  */}\r\n            {/* <HorizontalMenuAnimation /> */}\r\n\r\n            {/* vertical menu  */}\r\n            {/* <VerticalMenuOne /> */}\r\n\r\n            {/* full page menu  */}\r\n            {/* <FullPageMenu /> */}\r\n\r\n            {/* canvas menu  */}\r\n            {/* <CanvasMenuComponent /> */}\r\n\r\n            {/* pure slider */}\r\n            {/* <PureSlider /> */}\r\n\r\n            {/* animation dropdown  */}\r\n            {/* <AnimationDropdownComponent /> */}\r\n\r\n            {/* split menu  */}\r\n            {/* <SplitMenuComponent /> */}\r\n\r\n\r\n            {/* accordion menu  */}\r\n            {/* <AccordionMenuComponent /> */}\r\n\r\n\r\n            {/* animation project */}\r\n            {/* <FirstAnimationComponent /> */}\r\n\r\n            {/* page scroller  */}\r\n            {/* <PageScrollerComponent /> */}\r\n\r\n\r\n            {/* first form   */}\r\n            {/* <FirstFormComponent /> */}\r\n\r\n            {/* second forms   */}\r\n            {/* <SecondFormComponent /> */}\r\n\r\n            {/* third form  */}\r\n            {/* <ThirdFormComponent /> */}\r\n\r\n\r\n            {/* component use hooks  */}\r\n            {/* <HookFullComponent /> */}\r\n\r\n            {/* react table   */}\r\n            {/* <ReactTableComponent /> */}\r\n\r\n            {/* react form validation   */}\r\n            <FormValidationComponent />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n"],"sourceRoot":""}